---
- hosts: localhost  # put localhost.  We are processing against aws
  connection: local  # put local.  We are processing against aws
  gather_facts: False  # don't gather facts against localhost
  tasks:
  - name: create a new ec2 VPC
    # create an VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}" 
      cidr_block: "{{ vpcCidrBlock }}"
      region: "{{ region }}"
      # enable dns support 
      dns_support: yes
      # enable dns hostnames
      dns_hostnames: yes
      tenancy: default
      state: "{{ state }}"
    register: ec2_vpc_net_result

  - name: create ec2 vpc internet gateway       
    # create an internet gateway for the vpc
    ec2_vpc_igw:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}" 
      tags:
        Name: "{{ igw_name }}"
    register: igw_result

  - name: create ec2 vpc subnet
    # create the subnet for the vpc with a cidr block
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"      # az is the availability zone
      state: "{{ state }}"
      cidr: "{{ subNetCidrBlock }}"
      # enable public ip
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name }}"
    register: subnet_result

  - name: create ec2 security group
    # create a security group for the vpc
    ec2_group:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ security_group_name }}"
      description: "{{ security_group_name }}"
      tags:
        Name: "{{ security_group_name  }}"
      rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: "{{ port22CidrBlock }}"
        rule_desc: allow all on port 22
    register: security_group_results
    
  - name: create ec2 VPC Network access control list
    # create the access control list with ingress and egress ports 
    ec2_vpc_nacl:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ acl_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      tags:
        Name: "{{ acl_name }}"
        Description: "{{ acl_name }}"
      # ingress acl rules
      ingress:
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
        - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      egress:
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
    register: acl_results
    
  - name: create ec2 VPC public subnet route table
    # create route table and connect subnet to routes
    ec2_vpc_route_table:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ route_table_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      
      # create routes
      routes:
        - dest: "{{ destinationCidrBlock }}" 
          gateway_id: "{{ igw_result.gateway_id }}"
    register: public_route_table


  - name: Get AMI Image ID for Debian10
    ec2_ami_info:
      region: "{{ region }}"
      filters:
        name: "Debian 10 (Buster) LAMP Stack - Linux Apache MySQL/MariaDB PHP 7.2-9*"
    register: amis_debian

  - name:  print Mgmt ami id
    vars:
      debian_ami: >
        {{ amis_debian.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}
    debug:
      msg: "{{debian_ami.image_id}}"
    register: debian_ami
    
  - name: launche Debian2
    ec2:
      region: "{{ region }}"
      image: "{{ debian_ami.msg }}"
      instance_type: "t2.micro"
      private_ip: "{{ net_ip }}"
      wait: no
      group_id: "{{ security_group_results.group_id }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      key_name: "{{ keypairName  }}"
      assign_public_ip: false
      instance_tags: 
        Name: Debian2      
    register: Debian2Instance 
